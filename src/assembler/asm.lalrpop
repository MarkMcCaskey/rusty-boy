use std::str::FromStr;
use super::CSL;
use super::CSL::*;
use cpu::constants;
use cpu::constants::*;
use cpu::*;

grammar;

pub Input: Vec<u8> = {
    ".code" <Code> => {
        let mut output: Vec<u8> = vec![];

        for inst in <> {
            let inst_copy = inst.clone();
            match inst.insttype {
                CSL::InstructionType::Zero           => output.push(inst.prefix),
                CSL::InstructionType::Unary(v1)      => {
                    let (b1, b2) = CSL::unary_dispatch(inst_copy, v1);
                    output.push(b1);
                    output.push(b2);
                },
                CSL::InstructionType::Binary(v1, v2) => {
                    let (b1, b2, b3) = CSL::binary_dispatch(inst_copy, v1, v2);
                    output.push(b1);
                    output.push(b2);
                    output.push(b3);
                },
            };
        }
        output
    },
};


Code: Vec<CSL::Instruction> = {
    <Instruction> => vec![<>],
};

Instruction: CSL::Instruction = {
    "NOP" => CSL::Instruction{insttype: CSL::InstructionType::Zero, prefix: 0x0},
};

Register8: CSL::Value = {
    "A" => CSL::Value::Register8(CpuRegister::A),
    "B" => CSL::Value::Register8(CpuRegister::B),
    "C" => CSL::Value::Register8(CpuRegister::C),
    "D" => CSL::Value::Register8(CpuRegister::D),
    "E" => CSL::Value::Register8(CpuRegister::E),
    "H" => CSL::Value::Register8(CpuRegister::H),
    "L" => CSL::Value::Register8(CpuRegister::L),
};

Register16: CSL::Value = {
    "BC" => CSL::Value::Register16(CpuRegister16::BC),
    "DE" => CSL::Value::Register16(CpuRegister16::DE),
    "HL" => CSL::Value::Register16(CpuRegister16::HL),
    "SP" => CSL::Value::Register16(CpuRegister16::SP),
};

Number: CSL::Value = { Hex => if <> > (u8::max_value() as u16) {
    CSL::Value::Literal16(<>)
} else {
    CSL::Value::Literal8(<> as u8)
}};
Hex: u16 = <r"0(x|X)[0-9a-fA-F]+"> => u16::from_str_radix(&<>[2..], 16).unwrap();
Decimal: u16 = <r"-?[0-9]+"> => u16::from_str(<>).unwrap();
